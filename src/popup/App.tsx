import React, { useEffect, useState } from 'react';
import { AppState, ConnectionStatus, MessageType, StoredAccount } from '../types';

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const initialState: AppState = {
  accounts: [],
  status: ConnectionStatus.DISCONNECTED,
  settings: {
    updateInterval: 5,
  },
};

const App: React.FC = () => {
  const [state, setState] = useState<AppState>(initialState);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  

console.log('üöÄ : REDIRECT_URL:', browser.identity.getRedirectURL());

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    loadData();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç background script
    browser.runtime.onMessage.addListener(handleMessage);

    // –û—Ç–ø–∏—Å–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      browser.runtime.onMessage.removeListener(handleMessage);
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ storage.local
  const loadData = async () => {
    try {
      setLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ storage.local
      const data = await browser.storage.local.get(['accounts', 'settings']);
      const accounts = data.accounts || [];
      const settings = data.settings || initialState.settings;
      
      setState({
        accounts,
        status: accounts.length > 0 ? ConnectionStatus.CONNECTED : ConnectionStatus.DISCONNECTED,
        settings,
      });
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      requestUpdate();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      setState({
        ...state,
        status: ConnectionStatus.ERROR,
      });
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç background script
  const handleMessage = (message: any) => {
    switch (message.type) {
      case MessageType.UPDATE_COMPLETE:
        setState({
          ...state,
          accounts: message.payload.accounts,
          status: ConnectionStatus.CONNECTED,
        });
        setError(null);
        break;
        
      case MessageType.AUTH_COMPLETE:
        loadData();
        break;
        
      case MessageType.LOGOUT_COMPLETE:
        loadData();
        break;
        
      case MessageType.ERROR:
        setError(message.payload.message);
        setState({
          ...state,
          status: ConnectionStatus.ERROR,
        });
        break;
    }
    
    return true;
  };

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  const requestUpdate = () => {
    browser.runtime.sendMessage({
      type: MessageType.REQUEST_UPDATE,
    });
  };

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  const handleLogin = () => {
    setLoading(true);
    setError(null);
    
    browser.runtime.sendMessage({
      type: MessageType.AUTH_REQUEST,
    });
  };

  // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
  const handleLogout = (email?: string) => {
    setLoading(true);
    setError(null);
    
    browser.runtime.sendMessage({
      type: MessageType.LOGOUT_REQUEST,
      payload: {
        email,
      },
    });
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ Gmail
  const handleOpenGmail = (email: string) => {
    let url = `https://mail.google.com/mail/u/${email}`;
    browser.tabs.create({ url });
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–≥—Ä—É–∑–∫–∏
  if (loading) {
    return (
      <div className="container">
        <div className="loading">
          <div className="spinner"></div>
        </div>
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–µ–∑ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
  if (state.accounts.length === 0) {
    return (
      <div className="container">
        <div className="header">
          <h1>Gmail Unread Counter</h1>
        </div>
        
        <div className="empty-state">
          <p>–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</p>
          <button className="button button-primary" onClick={handleLogin}>
            –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
          </button>
        </div>
        
        {error && (
          <div className="status status-error">
            {error}
          </div>
        )}
      </div>
    );
  }

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  return (
    <div className="container">
      <div className="header">
        <h1>Gmail Unread Counter</h1>
        <button className="button button-secondary" onClick={requestUpdate}>
          –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>
      
      <ul className="account-list">
        {state.accounts.map((account: StoredAccount) => (
          <li 
            key={account.email} 
            className="account-item"
            onClick={() => handleOpenGmail(account.email)}
          >
            <span className="account-email">{account.email}</span>
            <span className="account-unread">{account.unreadCount}</span>
          </li>
        ))}
      </ul>
      
      <div className="actions">
        <button className="button button-primary" onClick={handleLogin}>
          –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
        </button>
        <button className="button button-danger" onClick={() => handleLogout()}>
          –í—ã–π—Ç–∏
        </button>
      </div>
      
      {error && (
        <div className="status status-error">
          {error}
        </div>
      )}
    </div>
  );
};

export default App;
